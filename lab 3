
import random

# Function to print even numbers up to a user-defined limit
def even_numbers():
    print("\t\t\t\t\tEven numbers")
    try:
        n = int(input("Enter a number: "))  # User inputs a number
        for a in range(2, n + 1, 2):  # Loop through even numbers starting from 2
            print(a)
    except ValueError:
        print("Error!")  # Handle input error

# Function to calculate and display factorial of a number
def factorial():
    print("\t\t\t\t\tFactorial")
    try:
        n = int(input("Enter a number: "))  # User inputs a number
        res = 1
        for a in range(1, n + 1):  # Loop to calculate factorial
            res *= a
            print(res)
    except ValueError:
        print("Error!")  # Handle input error

# Function to search for the number 42, and stop when found
def number_search():
    print("\t\t\t\t\tNumber Search")
    try:
        while True:
            num = int(input("Enter a number: "))  # User continuously inputs numbers
            if num == 42:
                break  # Exit the loop if 42 is entered
    except ValueError:
        print("Error!")  # Handle input error

# Function to count occurrences of a character in a string
def character_counting():
    print("\t\t\t\t\tCharacter Counting")
    text = input("Enter a string: ")  # User inputs a string
    char_to_count = input("Enter the character to count: ")  # User selects a character
    count = text.count(char_to_count)  # Count the character's occurrences in the string
    print(f"Count of '{char_to_count}' in the string: {count}")

# Function to calculate and display the sum of the digits in a number
def sum_of_digits_of_a_number():
    print("\t\t\t\t\tSum of Digits of a Number")
    number = input("Enter a number: ")  # User inputs a number as a string
    total = sum(int(digit) for digit in number if digit.isdigit())  # Sum the digits in the number
    print("Sum of digits:", total)

# Function to generate Fibonacci numbers up to a specified limit
def fibonacci_numbers():
    print("\t\t\t\t\tFibonacci Numbers")
    n = int(input("Enter the number of Fibonacci numbers to generate: "))  # User inputs the count
    a, b = 0, 1
    for _ in range(n):  # Loop to generate Fibonacci numbers
        print(a)
        a, b = b, a + b

# Function to reverse a given string
def reverse_a_string():
    print("\t\t\t\t\tReverse a String")
    text = input("Enter a string: ")  # User inputs a string
    reversed_text = text[::-1]  # Reverse the string
    print("Reversed string:", reversed_text)

# Function to skip even numbers and calculate the sum of odd ones
def skip_even_ones():
    print("\t\t\t\t\tSkip Even Numbers")
    odd_sum = 0
    while True:
        number = input("Enter a number (type 'stop' to end): ")  # User continuously inputs numbers
        if number.lower() == "stop":
            break  # Exit the loop if 'stop' is entered
        try:
            number = int(number)
            if number % 2 != 0:
                odd_sum += number  # Add odd numbers to the sum
        except ValueError:
            print("Error!")  # Handle input error
    print("Sum of odd numbers:", odd_sum)

# Function to play a number guessing game
def guess_the_number():
    print("\t\t\t\t\tGuess the Number")
    r = random.randint(0, 100)  # Generate a random number between 0 and 100
    print(f"Random number: {r}")
    while True:
        guess = input("Guess the number (type 'stop' to end): ")  # User guesses a number
        if guess.lower() == "stop":
            print("Correct!")
            break  # Exit the game if 'stop' is entered
        try:
            guess = int(guess)
            if guess == r:
                print("Correct!")
                break  # Exit the game if the correct number is guessed
            elif guess < r:
                print("Too small")
            else:
                print("Too big")
        except ValueError:
            print("Error!")  # Handle input error


# Function to check if a string is a palindrome
def palindrome():
    print("\t\t\t\t\tPalindrome")
    text = input("Enter a string: ")  # User inputs a string
    reversed_text = text[::-1]  # Reverse the string
    if text == reversed_text:
        print("Palindrome")  # Check if the original and reversed strings are the same
    else:
        print("Not a Palindrome")

# Function to calculate the result of a number raised to a power
def number_to_the_power():
    print("\t\t\t\t\tNumber to the Power")
    x = int(input("Enter the base number: "))  # User inputs the base
    y = int(input("Enter the exponent: "))  # User inputs the exponent
    result = x ** y  # Calculate the result
    print(f"{x} to the power of {y} is: {result}")

# Function to count prime numbers up to a specified limit
def counting_prime_numbers():
    print("\t\t\t\t\tCounting Prime Numbers")
    N = int(input("Enter a positive integer N: "))  # User inputs a positive integer
    for num in range(2, N + 1):  # Loop through numbers
        is_prime = True
        for divisor in range(2, int(num**0.5) + 1):
            if num % divisor == 0:
                is_prime = False
                break
        if is_prime:
            print(num, end=" ")  # Print prime numbers

    print()

# Function to reverse a given number
def reverse_number():
    print("\t\t\t\t\tReverse Number")
    number = input("Enter a number: ")  # User inputs a number as a string
    reversed_number = number[::-1]  # Reverse the number
    print("Reversed number:", reversed_number)

# Function to check for primality of a number
def check_for_primality():
    print("\t\t\t\t\tCheck for Primality")
    num = int(input("Enter a number: "))  # User inputs a number
    is_prime = num > 1 and all(num % i != 0 for i in range(2, int(num**0.5) + 1))
    # Check if the number is prime
    print(f"{num} is {'prime' if is_prime else 'not prime'}")

# Function to perform a Caesar cipher encryption
def caesar_cipher(text, shift):
    encrypted_text = ""
    for char in text:
        if char.isalpha():
            is_upper = char.isupper


    is_upper = char.isupper()
    char = char.lower()
    shifted_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))
    if is_upper:
            shifted_char = shifted_char.upper()
            encrypted_text += shifted_char
    else:
        encrypted_text += char

    return encrypted_text

# Get user input for the string and shift value
user_input = input("Enter a string: ")
shift = int(input("Enter the shift value: "))

# Call the Caesar cipher function
encrypted_text = caesar_cipher(user_input, shift)

# Print the encrypted text
print("Encrypted string:", encrypted_text)

# Call the functions
even_numbers()
factorial()
number_search()
character_counting()
sum_of_digits_of_a_number()
fibonacci_numbers()
reverse_a_string()
skip_even_ones()
guess_the_number()
palindrome()
number_to_the_power()
counting_prime_numbers()
reverse_number()
check_for_primality()